-- Script de test apr√®s suppression de la table requests
-- V√©rifie que tous les services fonctionnent avec la nouvelle architecture

-- 1. V√©rifier que la table requests n'existe plus
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'requests') THEN
    RAISE NOTICE '‚úÖ Table requests supprim√©e avec succ√®s';
  ELSE
    RAISE NOTICE '‚ùå Erreur: La table requests existe encore';
  END IF;
END $$;

-- 2. V√©rifier que la table businesses a les nouvelles colonnes
DO $$
BEGIN
  IF EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'businesses' AND column_name = 'request_status'
  ) THEN
    RAISE NOTICE '‚úÖ Colonne request_status ajout√©e √† businesses';
  ELSE
    RAISE NOTICE '‚ùå Erreur: Colonne request_status manquante dans businesses';
  END IF;
  
  IF EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'businesses' AND column_name = 'owner_name'
  ) THEN
    RAISE NOTICE '‚úÖ Colonne owner_name ajout√©e √† businesses';
  ELSE
    RAISE NOTICE '‚ùå Erreur: Colonne owner_name manquante dans businesses';
  END IF;
END $$;

-- 3. V√©rifier que les fonctions existent
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'create_partner_request') THEN
    RAISE NOTICE '‚úÖ Fonction create_partner_request existe';
  ELSE
    RAISE NOTICE '‚ùå Erreur: Fonction create_partner_request manquante';
  END IF;
  
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'approve_partner_request') THEN
    RAISE NOTICE '‚úÖ Fonction approve_partner_request existe';
  ELSE
    RAISE NOTICE '‚ùå Erreur: Fonction approve_partner_request manquante';
  END IF;
  
  IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'reject_partner_request') THEN
    RAISE NOTICE '‚úÖ Fonction reject_partner_request existe';
  ELSE
    RAISE NOTICE '‚ùå Erreur: Fonction reject_partner_request manquante';
  END IF;
END $$;

-- 4. Test de cr√©ation d'une demande partenaire
DO $$
DECLARE
  v_business_id integer;
  v_subscription_id uuid;
BEGIN
  RAISE NOTICE 'üß™ Test de cr√©ation d''une demande partenaire...';
  
  -- Cr√©er une demande de test
  SELECT id INTO v_business_id
  FROM create_partner_request(
    'Test Restaurant',
    'Restaurant de test',
    '123 Rue Test, Abidjan',
    'test@example.com',
    '0123456789',
    'Test Owner',
    '0123456789',
    'Restaurant',
    'Cuisine fran√ßaise',
    '{"sp√©cialit√©s": ["pizza", "pasta"]}',
    '1_month'
  );
  
  IF v_business_id IS NOT NULL THEN
    RAISE NOTICE '‚úÖ Demande partenaire cr√©√©e avec ID: %', v_business_id;
    
    -- V√©rifier que l'abonnement a √©t√© cr√©√©
    SELECT current_subscription_id INTO v_subscription_id
    FROM businesses WHERE id = v_business_id;
    
    IF v_subscription_id IS NOT NULL THEN
      RAISE NOTICE '‚úÖ Abonnement cr√©√© avec ID: %', v_subscription_id;
    ELSE
      RAISE NOTICE '‚ùå Erreur: Aucun abonnement cr√©√©';
    END IF;
    
    -- Nettoyer le test
    DELETE FROM businesses WHERE id = v_business_id;
    RAISE NOTICE 'üßπ Test nettoy√©';
  ELSE
    RAISE NOTICE '‚ùå Erreur: Impossible de cr√©er la demande';
  END IF;
END $$;

-- 5. V√©rifier les services frontend
DO $$
BEGIN
  RAISE NOTICE 'üìã Services frontend √† v√©rifier:';
  RAISE NOTICE '  - AdminBusinessRequestsService';
  RAISE NOTICE '  - useAdminRequests hook';
  RAISE NOTICE '  - AdminRequests.tsx page';
  RAISE NOTICE '  - partner-stats.ts (mis √† jour)';
  RAISE NOTICE '  - use-subscription.ts (mis √† jour)';
END $$;

-- 6. Message de confirmation
DO $$
BEGIN
  RAISE NOTICE 'üéâ Test de suppression de la table requests termin√©!';
  RAISE NOTICE 'üìã Architecture simplifi√©e:';
  RAISE NOTICE '  - Table requests supprim√©e';
  RAISE NOTICE '  - Colonnes ajout√©es √† businesses';
  RAISE NOTICE '  - Fonctions PostgreSQL cr√©√©es';
  RAISE NOTICE '  - Services frontend mis √† jour';
  RAISE NOTICE '‚ö†Ô∏è  IMPORTANT: Testez l''interface utilisateur';
END $$; 