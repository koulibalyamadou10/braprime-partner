-- Script de test final pour la cr√©ation d'abonnements
-- Ex√©cutez ce script dans votre base de donn√©es Supabase

-- 1. V√©rifier l'√©tat de la base de donn√©es
SELECT 
  '√âtat de la base de donn√©es' as test_type,
  'Plans disponibles' as info,
  COUNT(*) as count
FROM subscription_plans;

SELECT 
  '√âtat de la base de donn√©es' as test_type,
  'Politiques RLS' as info,
  COUNT(*) as count
FROM pg_policies 
WHERE tablename = 'partner_subscriptions';

-- 2. Test de cr√©ation d'abonnement simple
DO $$
DECLARE
  v_subscription_id uuid;
BEGIN
  RAISE NOTICE 'üß™ Test 1: Cr√©ation d''abonnement simple...';
  
  v_subscription_id := create_subscription_for_request(
    '1_month',
    'test@example.com',
    '+224123456789',
    '123 Test Street, Conakry',
    1
  );
  
  RAISE NOTICE '‚úÖ Abonnement cr√©√© avec ID: %', v_subscription_id;
  
  -- V√©rifier que l'abonnement existe
  IF EXISTS (SELECT 1 FROM partner_subscriptions WHERE id = v_subscription_id) THEN
    RAISE NOTICE '‚úÖ V√©rification r√©ussie';
  ELSE
    RAISE NOTICE '‚ùå Erreur - Abonnement non trouv√©';
  END IF;
  
  -- Nettoyer
  DELETE FROM partner_subscriptions WHERE id = v_subscription_id;
  RAISE NOTICE 'üßπ Test 1 nettoy√©';
  
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Test 1 √©chou√©: %', SQLERRM;
END $$;

-- 3. Test de cr√©ation de demande compl√®te
DO $$
DECLARE
  v_request_id uuid;
BEGIN
  RAISE NOTICE 'üß™ Test 2: Cr√©ation de demande compl√®te...';
  
  v_request_id := create_partner_request_with_subscription(
    'Test User',
    'test@example.com',
    '+224123456789',
    'Restaurant Test',
    'restaurant',
    '123 Test Street, Conakry',
    '+224123456789',
    'restaurant@test.com',
    'Restaurant de test',
    '8h-22h',
    5,
    'Africaine',
    ARRAY['Poulet', 'Poisson'],
    '3_months',
    'Test de cr√©ation'
  );
  
  RAISE NOTICE '‚úÖ Demande cr√©√©e avec ID: %', v_request_id;
  
  -- V√©rifier que la demande existe
  IF EXISTS (SELECT 1 FROM requests WHERE id = v_request_id) THEN
    RAISE NOTICE '‚úÖ V√©rification demande r√©ussie';
    
    -- Afficher les m√©tadonn√©es
    SELECT metadata FROM requests WHERE id = v_request_id;
  ELSE
    RAISE NOTICE '‚ùå Erreur - Demande non trouv√©e';
  END IF;
  
  -- Nettoyer
  DELETE FROM requests WHERE id = v_request_id;
  RAISE NOTICE 'üßπ Test 2 nettoy√©';
  
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Test 2 √©chou√©: %', SQLERRM;
END $$;

-- 4. Test de liaison d'abonnement (n√©cessite un business existant)
DO $$
DECLARE
  v_subscription_id uuid;
  v_business_id integer;
  v_link_result boolean;
BEGIN
  RAISE NOTICE 'üß™ Test 3: Liaison d''abonnement...';
  
  -- Cr√©er un abonnement de test
  v_subscription_id := create_subscription_for_request(
    '1_month',
    'test@example.com',
    '+224123456789',
    '123 Test Street, Conakry',
    1
  );
  
  -- Cr√©er un business de test
  INSERT INTO businesses (name, address, owner_id) 
  VALUES ('Test Business', '123 Test Street', '00000000-0000-0000-0000-000000000000')
  RETURNING id INTO v_business_id;
  
  -- Tester la liaison
  v_link_result := link_subscription_to_business(v_subscription_id, v_business_id);
  
  IF v_link_result THEN
    RAISE NOTICE '‚úÖ Liaison r√©ussie';
  ELSE
    RAISE NOTICE '‚ùå Erreur de liaison';
  END IF;
  
  -- Nettoyer
  DELETE FROM businesses WHERE id = v_business_id;
  DELETE FROM partner_subscriptions WHERE id = v_subscription_id;
  RAISE NOTICE 'üßπ Test 3 nettoy√©';
  
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Test 3 √©chou√©: %', SQLERRM;
END $$;

-- 5. V√©rifier les fonctions disponibles
SELECT 
  'Fonctions disponibles' as test_type,
  proname as function_name,
  pg_get_function_identity_arguments(oid) as arguments
FROM pg_proc 
WHERE proname IN ('create_subscription_for_request', 'link_subscription_to_business', 'create_partner_request_with_subscription')
ORDER BY proname;

-- 6. Test de diff√©rents formats de plan
DO $$
DECLARE
  v_plan_record record;
  v_test_types text[] := ARRAY['1_month', '1-month', '3_months', '3-months'];
  v_test_type text;
BEGIN
  RAISE NOTICE 'üß™ Test 4: Formats de plans...';
  
  FOREACH v_test_type IN ARRAY v_test_types
  LOOP
    SELECT * INTO v_plan_record
    FROM subscription_plans 
    WHERE plan_type::text = v_test_type
    LIMIT 1;
    
    IF v_plan_record IS NOT NULL THEN
      RAISE NOTICE '‚úÖ Plan trouv√© pour %: %', v_test_type, v_plan_record.name;
    ELSE
      RAISE NOTICE '‚ùå Plan non trouv√© pour: %', v_test_type;
    END IF;
  END LOOP;
  
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Test 4 √©chou√©: %', SQLERRM;
END $$;

-- 7. Message de confirmation final
DO $$
BEGIN
  RAISE NOTICE 'üéâ Tests de cr√©ation d''abonnement termin√©s!';
  RAISE NOTICE 'üìã Si tous les tests sont pass√©s, le syst√®me est pr√™t';
  RAISE NOTICE 'üí° Les erreurs de type de donn√©es devraient √™tre r√©solues';
  RAISE NOTICE 'üöÄ Le syst√®me de demandes avec abonnements est op√©rationnel';
END $$; 