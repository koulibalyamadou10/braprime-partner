-- Script pour corriger les politiques RLS des abonnements pour permettre la cr√©ation lors des demandes
-- Ex√©cutez ce script dans votre base de donn√©es Supabase

-- 1. V√©rifier les politiques RLS existantes
SELECT 
  'Politiques RLS existantes' as test_type,
  tablename,
  policyname,
  permissive,
  roles,
  cmd,
  qual
FROM pg_policies 
WHERE tablename = 'partner_subscriptions'
AND schemaname = 'public'
ORDER BY policyname;

-- 2. Supprimer les politiques existantes qui bloquent l'insertion
DROP POLICY IF EXISTS "partner_subscriptions_insert_policy" ON partner_subscriptions;
DROP POLICY IF EXISTS "partner_subscriptions_select_policy" ON partner_subscriptions;
DROP POLICY IF EXISTS "partner_subscriptions_update_policy" ON partner_subscriptions;

-- 3. Cr√©er de nouvelles politiques RLS plus permissives
DO $$
BEGIN
  -- Politique pour permettre l'insertion d'abonnements (pour les demandes)
  CREATE POLICY "partner_subscriptions_insert_policy" ON partner_subscriptions
  FOR INSERT WITH CHECK (
    -- Permettre l'insertion si l'utilisateur est admin
    EXISTS (
      SELECT 1 FROM user_profiles up
      JOIN user_roles ur ON up.role_id = ur.id
      WHERE up.id = auth.uid() AND ur.name = 'admin'
    )
    OR
    -- Permettre l'insertion si l'utilisateur est partenaire et que le business existe
    EXISTS (
      SELECT 1 FROM businesses b
      WHERE b.id = partner_subscriptions.partner_id 
      AND b.owner_id = auth.uid()
    )
    OR
    -- Permettre l'insertion pour les demandes (partner_id peut √™tre null temporairement)
    partner_subscriptions.partner_id IS NULL
  );
  RAISE NOTICE '‚úÖ Politique partner_subscriptions_insert_policy cr√©√©e';

  -- Politique pour permettre la lecture des abonnements
  CREATE POLICY "partner_subscriptions_select_policy" ON partner_subscriptions
  FOR SELECT USING (
    -- Permettre la lecture si l'utilisateur est admin
    EXISTS (
      SELECT 1 FROM user_profiles up
      JOIN user_roles ur ON up.role_id = ur.id
      WHERE up.id = auth.uid() AND ur.name = 'admin'
    )
    OR
    -- Permettre la lecture si l'utilisateur est partenaire et propri√©taire du business
    EXISTS (
      SELECT 1 FROM businesses b
      WHERE b.id = partner_subscriptions.partner_id 
      AND b.owner_id = auth.uid()
    )
    OR
    -- Permettre la lecture pour les demandes en cours (partner_id peut √™tre null)
    partner_subscriptions.partner_id IS NULL
  );
  RAISE NOTICE '‚úÖ Politique partner_subscriptions_select_policy cr√©√©e';

  -- Politique pour permettre la mise √† jour des abonnements
  CREATE POLICY "partner_subscriptions_update_policy" ON partner_subscriptions
  FOR UPDATE USING (
    -- Permettre la mise √† jour si l'utilisateur est admin
    EXISTS (
      SELECT 1 FROM user_profiles up
      JOIN user_roles ur ON up.role_id = ur.id
      WHERE up.id = auth.uid() AND ur.name = 'admin'
    )
    OR
    -- Permettre la mise √† jour si l'utilisateur est partenaire et propri√©taire du business
    EXISTS (
      SELECT 1 FROM businesses b
      WHERE b.id = partner_subscriptions.partner_id 
      AND b.owner_id = auth.uid()
    )
    OR
    -- Permettre la mise √† jour pour les demandes en cours (partner_id peut √™tre null)
    partner_subscriptions.partner_id IS NULL
  );
  RAISE NOTICE '‚úÖ Politique partner_subscriptions_update_policy cr√©√©e';

END $$;

-- 4. V√©rifier les nouvelles politiques
SELECT 
  'Nouvelles politiques RLS' as test_type,
  tablename,
  policyname,
  permissive,
  roles,
  cmd,
  qual
FROM pg_policies 
WHERE tablename = 'partner_subscriptions'
AND schemaname = 'public'
ORDER BY policyname;

-- 5. Test de cr√©ation d'abonnement (comment√© pour √©viter les erreurs)
DO $$
DECLARE
  v_test_subscription_id uuid;
BEGIN
  RAISE NOTICE 'üß™ Test de cr√©ation d''abonnement...';
  
  -- Tenter de cr√©er un abonnement de test
  INSERT INTO partner_subscriptions (
    partner_id,
    plan_id,
    status,
    start_date,
    end_date,
    auto_renew,
    total_paid,
    monthly_amount,
    billing_email,
    billing_phone
  ) VALUES (
    NULL, -- partner_id null pour les demandes
    (SELECT id FROM subscription_plans LIMIT 1),
    'pending',
    NOW(),
    NOW() + INTERVAL '1 month',
    false,
    0,
    200000,
    'test@example.com',
    '+224123456789'
  ) RETURNING id INTO v_test_subscription_id;
  
  RAISE NOTICE '‚úÖ Test r√©ussi - Abonnement cr√©√© avec ID: %', v_test_subscription_id;
  
  -- Nettoyer le test
  DELETE FROM partner_subscriptions WHERE id = v_test_subscription_id;
  RAISE NOTICE 'üßπ Test nettoy√©';
  
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Test √©chou√©: %', SQLERRM;
END $$;

-- 6. Message de confirmation
DO $$
BEGIN
  RAISE NOTICE 'üéâ Correction des politiques RLS termin√©e!';
  RAISE NOTICE 'üìã Les abonnements peuvent maintenant √™tre cr√©√©s lors des demandes';
  RAISE NOTICE 'üí° Les partenaires peuvent voir et modifier leurs abonnements';
  RAISE NOTICE 'üîê Les admins ont acc√®s complet √† tous les abonnements';
END $$; 