-- Script de test pour la cr√©ation d'abonnements
-- Ex√©cutez ce script dans votre base de donn√©es Supabase

-- 1. V√©rifier les plans disponibles
SELECT 
  'Plans disponibles' as test_type,
  id,
  name,
  plan_type,
  monthly_price,
  duration_months
FROM subscription_plans
ORDER BY duration_months;

-- 2. V√©rifier les politiques RLS
SELECT 
  'Politiques RLS partner_subscriptions' as test_type,
  policyname,
  cmd,
  qual
FROM pg_policies 
WHERE tablename = 'partner_subscriptions'
AND schemaname = 'public'
ORDER BY policyname;

-- 3. Test de cr√©ation d'abonnement via fonction
DO $$
DECLARE
  v_subscription_id uuid;
  v_plan_type varchar := '1-month';
BEGIN
  RAISE NOTICE 'üß™ Test de cr√©ation d''abonnement via fonction...';
  
  -- V√©rifier que le plan existe
  IF NOT EXISTS (SELECT 1 FROM subscription_plans WHERE plan_type = v_plan_type) THEN
    RAISE NOTICE '‚ö†Ô∏è  Plan % non trouv√©, utilisation du premier plan disponible', v_plan_type;
    SELECT plan_type INTO v_plan_type FROM subscription_plans LIMIT 1;
  END IF;
  
  RAISE NOTICE 'üìã Utilisation du plan: %', v_plan_type;
  
  -- Cr√©er l'abonnement
  v_subscription_id := create_subscription_for_request(
    v_plan_type,
    'test@example.com',
    '+224123456789',
    '123 Test Street, Conakry',
    1
  );
  
  RAISE NOTICE '‚úÖ Abonnement cr√©√© avec ID: %', v_subscription_id;
  
  -- V√©rifier que l'abonnement a √©t√© cr√©√©
  IF EXISTS (SELECT 1 FROM partner_subscriptions WHERE id = v_subscription_id) THEN
    RAISE NOTICE '‚úÖ V√©rification r√©ussie - Abonnement trouv√© en base';
  ELSE
    RAISE NOTICE '‚ùå Erreur - Abonnement non trouv√© en base';
  END IF;
  
  -- Nettoyer le test
  DELETE FROM partner_subscriptions WHERE id = v_subscription_id;
  RAISE NOTICE 'üßπ Test nettoy√©';
  
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Test √©chou√©: %', SQLERRM;
END $$;

-- 4. Test de cr√©ation de demande compl√®te
DO $$
DECLARE
  v_request_id uuid;
  v_plan_type varchar := '1-month';
BEGIN
  RAISE NOTICE 'üß™ Test de cr√©ation de demande compl√®te...';
  
  -- V√©rifier que le plan existe
  IF NOT EXISTS (SELECT 1 FROM subscription_plans WHERE plan_type = v_plan_type) THEN
    RAISE NOTICE '‚ö†Ô∏è  Plan % non trouv√©, utilisation du premier plan disponible', v_plan_type;
    SELECT plan_type INTO v_plan_type FROM subscription_plans LIMIT 1;
  END IF;
  
  RAISE NOTICE 'üìã Utilisation du plan: %', v_plan_type;
  
  -- Cr√©er la demande compl√®te
  v_request_id := create_partner_request_with_subscription(
    'Test User',
    'test@example.com',
    '+224123456789',
    'Restaurant Test',
    'restaurant',
    '123 Test Street, Conakry',
    '+224123456789',
    'restaurant@test.com',
    'Restaurant de test',
    '8h-22h',
    5,
    'Africaine',
    ARRAY['Poulet', 'Poisson'],
    v_plan_type,
    'Test de cr√©ation'
  );
  
  RAISE NOTICE '‚úÖ Demande cr√©√©e avec ID: %', v_request_id;
  
  -- V√©rifier que la demande a √©t√© cr√©√©e
  IF EXISTS (SELECT 1 FROM requests WHERE id = v_request_id) THEN
    RAISE NOTICE '‚úÖ V√©rification r√©ussie - Demande trouv√©e en base';
    
    -- Afficher les m√©tadonn√©es
    SELECT metadata FROM requests WHERE id = v_request_id;
  ELSE
    RAISE NOTICE '‚ùå Erreur - Demande non trouv√©e en base';
  END IF;
  
  -- Nettoyer le test
  DELETE FROM requests WHERE id = v_request_id;
  RAISE NOTICE 'üßπ Test nettoy√©';
  
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Test √©chou√©: %', SQLERRM;
END $$;

-- 5. V√©rifier les fonctions disponibles
SELECT 
  'Fonctions disponibles' as test_type,
  proname as function_name,
  pg_get_function_identity_arguments(oid) as arguments
FROM pg_proc 
WHERE proname IN ('create_subscription_for_request', 'link_subscription_to_business', 'create_partner_request_with_subscription')
ORDER BY proname;

-- 6. Message de confirmation
DO $$
BEGIN
  RAISE NOTICE 'üéâ Tests de cr√©ation d''abonnement termin√©s!';
  RAISE NOTICE 'üìã Si tous les tests sont pass√©s, le syst√®me est pr√™t';
  RAISE NOTICE 'üí° Les erreurs RLS devraient maintenant √™tre r√©solues';
END $$; 