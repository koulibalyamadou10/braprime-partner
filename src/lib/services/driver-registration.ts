import { supabase } from '@/lib/supabase';

export interface DriverRegistrationData {
  // Informations du chauffeur
  name: string;
  email: string;
  phone: string;
  
  // Informations du v√©hicule
  vehicle_type: 'Moto' | 'Voiture' | 'Camion' | 'V√©lo';
  vehicle_plate?: string;
  
  // Type de chauffeur
  driver_type: 'independent' | 'service';
  
  // Informations suppl√©mentaires
  experience_years?: number;
  availability_hours?: string;
  preferred_zones?: string[];
  notes?: string;
}

export interface DriverRegistrationResult {
  success: boolean;
  driver?: {
    id: string;
    name: string;
    email: string;
    status: string;
  };
  message?: string;
  error?: string;
}

export class DriverRegistrationService {
  // Cr√©er une demande de chauffeur
  static async createDriverRequest(data: DriverRegistrationData): Promise<DriverRegistrationResult> {
    try {
      console.log('D√©but cr√©ation demande chauffeur:', { 
        ...data, 
        password: '[HIDDEN]'
      });

      // √âtape 1: Cr√©er directement dans la table drivers avec statut de demande
      const { data: driverData, error: driverError } = await supabase
        .rpc('create_driver_request', {
          p_name: data.name,
          p_email: data.email,
          p_phone: data.phone,
          p_vehicle_type: data.vehicle_type,
          p_vehicle_plate: data.vehicle_plate || '',
          p_driver_type: data.driver_type,
          p_experience_years: data.experience_years || 0,
          p_availability_hours: data.availability_hours || '',
          p_preferred_zones: data.preferred_zones || [],
          p_notes: data.notes || ''
        });

      if (driverError) {
        console.error('Erreur cr√©ation demande chauffeur:', driverError);
        return { success: false, error: driverError.message };
      }

      console.log('Demande chauffeur cr√©√©e avec succ√®s, Driver ID:', driverData);

      // √âtape 2: Envoyer les emails de notification (optionnel)
      try {
        // Pr√©parer les donn√©es pour l'email de confirmation
        const emailData = {
          request_id: driverData,
          request_type: 'driver',
          user_name: data.name,
          user_email: data.email,
          user_phone: data.phone,
          vehicle_type: data.vehicle_type,
          vehicle_plate: data.vehicle_plate,
          notes: data.notes,
          submitted_at: new Date().toISOString()
        };

        console.log('Donn√©es email pr√©par√©es:', emailData);
      } catch (emailError) {
        console.warn('Erreur lors de la pr√©paration des emails:', emailError);
        // Ne pas faire √©chouer la cr√©ation de la demande √† cause des emails
      }

      // √âtape 3: Ne PAS cr√©er de compte utilisateur imm√©diatement
      // Le compte sera cr√©√© uniquement apr√®s approbation par l'admin
      console.log('Demande cr√©√©e avec succ√®s, en attente d\'approbation admin');

      return {
        success: true,
        driver: {
          id: driverData,
          name: data.name,
          email: data.email,
          status: 'pending'
        },
        message: 'Demande envoy√©e avec succ√®s. Vous recevrez une notification apr√®s approbation.'
      };

    } catch (error) {
      console.error('Erreur lors de la cr√©ation de la demande chauffeur:', error);
      return { success: false, error: 'Erreur lors de la cr√©ation de la demande chauffeur' };
    }
  }

  // V√©rifier si un email existe d√©j√†
  static async checkEmailAvailability(email: string): Promise<{ available: boolean; error?: string }> {
    try {
      const { data, error } = await supabase
        .from('drivers')
        .select('id')
        .eq('email', email)
        .single();
      
      if (error && error.code !== 'PGRST116') {
        throw new Error(error.message);
      }

      return { available: !data };
    } catch (error) {
      console.error('Erreur lors de la v√©rification de l\'email:', error);
      return { available: false, error: 'Erreur lors de la v√©rification' };
    }
  }

  // V√©rifier si un num√©ro de t√©l√©phone existe d√©j√†
  static async checkPhoneAvailability(phone: string): Promise<{ available: boolean; error?: string }> {
    try {
      const { data, error } = await supabase
        .from('drivers')
        .select('id')
        .eq('phone', phone)
        .single();
      
      if (error && error.code !== 'PGRST116') {
        throw new Error(error.message);
      }

      return { available: !data };
    } catch (error) {
      console.error('Erreur lors de la v√©rification du t√©l√©phone:', error);
      return { available: false, error: 'Erreur lors de la v√©rification' };
    }
  }

  // Valider les donn√©es d'inscription
  static validateRegistrationData(data: DriverRegistrationData): { valid: boolean; errors: string[] } {
    const errors: string[] = [];

    // Validation du nom
    if (!data.name?.trim()) {
      errors.push('Le nom est requis');
    } else if (data.name.length < 2) {
      errors.push('Le nom doit contenir au moins 2 caract√®res');
    }

    // Validation de l'email
    if (!data.email?.trim()) {
      errors.push('L\'email est requis');
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email)) {
      errors.push('L\'email n\'est pas valide');
    }

    // Validation du t√©l√©phone
    if (!data.phone?.trim()) {
      errors.push('Le num√©ro de t√©l√©phone est requis');
    } else if (!/^\+?[0-9\s\-\(\)]{8,}$/.test(data.phone)) {
      errors.push('Le num√©ro de t√©l√©phone n\'est pas valide');
    }

    // Validation du type de v√©hicule
    if (!data.vehicle_type) {
      errors.push('Le type de v√©hicule est requis');
    }

    // Validation du type de chauffeur
    if (!data.driver_type) {
      errors.push('Le type de chauffeur est requis');
    }

    // Validation des ann√©es d'exp√©rience
    if (data.experience_years && (data.experience_years < 0 || data.experience_years > 50)) {
      errors.push('Les ann√©es d\'exp√©rience doivent √™tre entre 0 et 50');
    }

    return {
      valid: errors.length === 0,
      errors
    };
  }

  // Obtenir les types de v√©hicules disponibles
  static getVehicleTypes(): Array<{ value: string; label: string; icon: string }> {
    return [
      { value: 'Moto', label: 'Moto', icon: 'üèçÔ∏è' },
      { value: 'Voiture', label: 'Voiture', icon: 'üöó' },
      { value: 'Camion', label: 'Camion', icon: 'üöõ' },
      { value: 'V√©lo', label: 'V√©lo', icon: 'üö≤' }
    ];
  }

  // Obtenir les types de chauffeurs
  static getDriverTypes(): Array<{ value: string; label: string; description: string }> {
    return [
      { 
        value: 'independent', 
        label: 'Chauffeur Ind√©pendant', 
        description: 'Travaillez librement pour tous les commerces' 
      },
      { 
        value: 'service', 
        label: 'Chauffeur de Service', 
        description: 'Travaillez pour un commerce sp√©cifique' 
      }
    ];
  }
} 