import { supabase } from '@/lib/supabase';

export interface UserProfile {
  id: string;
  name: string;
  email: string;
  role_id: number;
  phone_number?: string;
  address?: string;
  profile_image?: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
  // Propri√©t√©s √©tendues (jointure avec user_roles)
  role_name?: string;
  role_description?: string;
}

export interface UpdateProfileData {
  name?: string;
  phone_number?: string;
  address?: string;
  profile_image?: string;
}

export interface UserAddress {
  id: string;
  user_id: string;
  label: string;
  street: string;
  city: string;
  state: string;
  postal_code?: string;
  country: string;
  latitude?: number;
  longitude?: number;
  is_default: boolean;
  created_at: string;
  updated_at: string;
}

export interface CreateAddressData {
  label: string;
  street: string;
  city: string;
  state: string;
  postal_code?: string;
  country?: string;
  latitude?: number;
  longitude?: number;
  is_default?: boolean;
}

export const UserProfileService = {
  // R√©cup√©rer le profil de l'utilisateur connect√©
  getProfile: async (): Promise<{ data: UserProfile | null; error: string | null }> => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        return { data: null, error: 'Utilisateur non authentifi√©' };
      }

      console.log('üîç [UserProfile] R√©cup√©ration du profil pour:', user.id);

      // Premi√®re tentative : r√©cup√©rer le profil existant
      let { data: profile, error } = await supabase
        .from('user_profiles')
        .select(`
          *,
          user_roles!inner(name, description)
        `)
        .eq('id', user.id)
        .single();

      // Si le profil n'existe pas, le cr√©er automatiquement
      if (error && error.code === 'PGRST116') {
        console.log('‚ö†Ô∏è [UserProfile] Profil non trouv√©, cr√©ation automatique...');
        
        // R√©cup√©rer les m√©tadonn√©es de l'utilisateur auth
        const userMetadata = user.user_metadata || {};
        const role = userMetadata.role || 'customer';
        
        // D√©terminer le role_id
        let roleId = 1; // customer par d√©faut
        if (role === 'partner') roleId = 2;
        else if (role === 'driver') roleId = 3;
        else if (role === 'admin') roleId = 4;
        
        // Cr√©er le profil
        const { data: newProfile, error: createError } = await supabase
          .from('user_profiles')
          .insert({
            id: user.id,
            name: userMetadata.name || user.email?.split('@')[0] || 'Utilisateur',
            email: user.email || '',
            role_id: roleId,
            phone_number: userMetadata.phone_number,
            address: userMetadata.address,
            profile_image: `https://ui-avatars.com/api/?name=${encodeURIComponent(userMetadata.name || user.email?.split('@')[0] || 'Utilisateur')}&background=random`,
            is_active: true
          })
          .select(`
            *,
            user_roles!inner(name, description)
          `)
          .single();
          
        if (createError) {
          console.error('‚ùå [UserProfile] Erreur cr√©ation profil:', createError);
          return { data: null, error: `Erreur lors de la cr√©ation du profil: ${createError.message}` };
        }
        
        console.log('‚úÖ [UserProfile] Profil cr√©√© avec succ√®s');
        profile = newProfile;
      } else if (error) {
        console.error('‚ùå [UserProfile] Erreur lors de la r√©cup√©ration du profil:', error);
        return { data: null, error: error.message };
      }

      // Transformer les donn√©es pour inclure les informations du r√¥le
      const transformedProfile = profile ? {
        ...profile,
        role_name: profile.user_roles?.name,
        role_description: profile.user_roles?.description
      } : null;

      console.log('‚úÖ [UserProfile] Profil r√©cup√©r√©:', {
        id: transformedProfile?.id,
        name: transformedProfile?.name,
        role: transformedProfile?.role_name
      });

      return { data: transformedProfile, error: null };
    } catch (error) {
      console.error('‚ùå [UserProfile] Erreur lors de la r√©cup√©ration du profil:', error);
      return { data: null, error: 'Erreur de connexion' };
    }
  },

  // Mettre √† jour le profil de l'utilisateur
  updateProfile: async (data: UpdateProfileData): Promise<{ data: UserProfile | null; error: string | null }> => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        return { data: null, error: 'Utilisateur non authentifi√©' };
      }

      const { data: profile, error } = await supabase
        .from('user_profiles')
        .update(data)
        .eq('id', user.id)
        .select(`
          *,
          user_roles!inner(name, description)
        `)
        .single();

      if (error) {
        console.error('Erreur lors de la mise √† jour du profil:', error);
        return { data: null, error: error.message };
      }

      // Transformer les donn√©es
      const transformedProfile = profile ? {
        ...profile,
        role_name: profile.user_roles?.name,
        role_description: profile.user_roles?.description
      } : null;

      return { data: transformedProfile, error: null };
    } catch (error) {
      console.error('Erreur lors de la mise √† jour du profil:', error);
      return { data: null, error: 'Erreur de connexion' };
    }
  },

  // Uploader une image de profil
  uploadProfileImage: async (file: File): Promise<{ data: string | null; error: string | null }> => {
    try {
      console.log('üöÄ D√©but de l\'upload de l\'image:', file.name, file.size, file.type);
      
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        console.error('‚ùå Utilisateur non authentifi√©');
        return { data: null, error: 'Utilisateur non authentifi√©' };
      }

      console.log('‚úÖ Utilisateur authentifi√©:', user.id);

      // G√©n√©rer un nom de fichier unique
      const fileExt = file.name.split('.').pop();
      const fileName = `${user.id}-${Date.now()}.${fileExt}`;
      const filePath = `profile-images/${fileName}`;

      console.log('üìÅ Chemin du fichier:', filePath);

      // V√©rifier que le bucket existe
      const { data: buckets, error: bucketError } = await supabase.storage.listBuckets();
      
      if (bucketError) {
        console.error('‚ùå Erreur lors de la v√©rification des buckets:', bucketError);
        return { data: null, error: 'Erreur de configuration du storage' };
      }

      const avatarsBucket = buckets?.find(b => b.id === 'avatars');
      if (!avatarsBucket) {
        console.error('‚ùå Bucket "avatars" non trouv√©');
        console.log('üì¶ Buckets disponibles:', buckets?.map(b => b.id));
        return { data: null, error: 'Bucket de storage non configur√©. Veuillez ex√©cuter le script de configuration.' };
      }

      console.log('‚úÖ Bucket "avatars" trouv√©');

      // Uploader le fichier
      console.log('üì§ Upload du fichier...');
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('avatars')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false
        });

      if (uploadError) {
        console.error('‚ùå Erreur lors de l\'upload de l\'image:', uploadError);
        return { data: null, error: uploadError.message };
      }

      console.log('‚úÖ Fichier upload√© avec succ√®s:', uploadData);

      // Obtenir l'URL publique
      const { data: { publicUrl } } = supabase.storage
        .from('avatars')
        .getPublicUrl(filePath);

      console.log('üîó URL publique g√©n√©r√©e:', publicUrl);

      return { data: publicUrl, error: null };
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'upload de l\'image:', error);
      return { data: null, error: 'Erreur lors de l\'upload de l\'image' };
    }
  },

  // Supprimer une image de profil
  deleteProfileImage: async (imageUrl: string): Promise<{ success: boolean; error: string | null }> => {
    try {
      // Extraire le chemin du fichier de l'URL
      const urlParts = imageUrl.split('/');
      const fileName = urlParts[urlParts.length - 1];
      const filePath = `profile-images/${fileName}`;

      const { error } = await supabase.storage
        .from('avatars')
        .remove([filePath]);

      if (error) {
        console.error('Erreur lors de la suppression de l\'image:', error);
        return { success: false, error: error.message };
      }

      return { success: true, error: null };
    } catch (error) {
      console.error('Erreur lors de la suppression de l\'image:', error);
      return { success: false, error: 'Erreur lors de la suppression de l\'image' };
    }
  },

  // R√©cup√©rer les adresses de l'utilisateur
  getUserAddresses: async (): Promise<{ data: UserAddress[]; error: string | null }> => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        return { data: [], error: 'Utilisateur non authentifi√©' };
      }

      const { data: addresses, error } = await supabase
        .from('user_addresses')
        .select('*')
        .eq('user_id', user.id)
        .order('is_default', { ascending: false })
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Erreur lors de la r√©cup√©ration des adresses:', error);
        return { data: [], error: error.message };
      }

      return { data: addresses || [], error: null };
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des adresses:', error);
      return { data: [], error: 'Erreur de connexion' };
    }
  },

  // Cr√©er une nouvelle adresse
  createAddress: async (data: CreateAddressData): Promise<{ data: UserAddress | null; error: string | null }> => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        return { data: null, error: 'Utilisateur non authentifi√©' };
      }

      // Si cette adresse est marqu√©e comme d√©faut, d√©sactiver les autres
      if (data.is_default) {
        await supabase
          .from('user_addresses')
          .update({ is_default: false })
          .eq('user_id', user.id);
      }

      const { data: address, error } = await supabase
        .from('user_addresses')
        .insert({
          user_id: user.id,
          ...data,
          country: data.country || 'Guin√©e'
        })
        .select()
        .single();

      if (error) {
        console.error('Erreur lors de la cr√©ation de l\'adresse:', error);
        return { data: null, error: error.message };
      }

      return { data: address, error: null };
    } catch (error) {
      console.error('Erreur lors de la cr√©ation de l\'adresse:', error);
      return { data: null, error: 'Erreur de connexion' };
    }
  },

  // Mettre √† jour une adresse
  updateAddress: async (addressId: string, data: Partial<CreateAddressData>): Promise<{ data: UserAddress | null; error: string | null }> => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        return { data: null, error: 'Utilisateur non authentifi√©' };
      }

      // Si cette adresse est marqu√©e comme d√©faut, d√©sactiver les autres
      if (data.is_default) {
        await supabase
          .from('user_addresses')
          .update({ is_default: false })
          .eq('user_id', user.id);
      }

      const { data: address, error } = await supabase
        .from('user_addresses')
        .update(data)
        .eq('id', addressId)
        .eq('user_id', user.id)
        .select()
        .single();

      if (error) {
        console.error('Erreur lors de la mise √† jour de l\'adresse:', error);
        return { data: null, error: error.message };
      }

      return { data: address, error: null };
    } catch (error) {
      console.error('Erreur lors de la mise √† jour de l\'adresse:', error);
      return { data: null, error: 'Erreur de connexion' };
    }
  },

  // Supprimer une adresse
  deleteAddress: async (addressId: string): Promise<{ success: boolean; error: string | null }> => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        return { success: false, error: 'Utilisateur non authentifi√©' };
      }

      const { error } = await supabase
        .from('user_addresses')
        .delete()
        .eq('id', addressId)
        .eq('user_id', user.id);

      if (error) {
        console.error('Erreur lors de la suppression de l\'adresse:', error);
        return { success: false, error: error.message };
      }

      return { success: true, error: null };
    } catch (error) {
      console.error('Erreur lors de la suppression de l\'adresse:', error);
      return { success: false, error: 'Erreur de connexion' };
    }
  },

  // D√©finir une adresse comme d√©faut
  setDefaultAddress: async (addressId: string): Promise<{ success: boolean; error: string | null }> => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        return { success: false, error: 'Utilisateur non authentifi√©' };
      }

      // D√©sactiver toutes les adresses par d√©faut
      await supabase
        .from('user_addresses')
        .update({ is_default: false })
        .eq('user_id', user.id);

      // Activer l'adresse s√©lectionn√©e
      const { error } = await supabase
        .from('user_addresses')
        .update({ is_default: true })
        .eq('id', addressId)
        .eq('user_id', user.id);

      if (error) {
        console.error('Erreur lors de la d√©finition de l\'adresse par d√©faut:', error);
        return { success: false, error: error.message };
      }

      return { success: true, error: null };
    } catch (error) {
      console.error('Erreur lors de la d√©finition de l\'adresse par d√©faut:', error);
      return { success: false, error: 'Erreur de connexion' };
    }
  },

  // Changer le mot de passe
  changePassword: async (currentPassword: string, newPassword: string): Promise<{ success: boolean; error: string | null }> => {
    try {
      // D'abord, v√©rifier le mot de passe actuel
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        return { success: false, error: 'Utilisateur non authentifi√©' };
      }

      // V√©rifier le mot de passe actuel en essayant de se reconnecter
      const { error: signInError } = await supabase.auth.signInWithPassword({
        email: user.email || '',
        password: currentPassword
      });

      if (signInError) {
        return { success: false, error: 'Le mot de passe actuel est incorrect' };
      }

      // Changer le mot de passe
      const { error } = await supabase.auth.updateUser({
        password: newPassword
      });

      if (error) {
        console.error('Erreur lors du changement de mot de passe:', error);
        return { success: false, error: error.message };
      }

      return { success: true, error: null };
    } catch (error) {
      console.error('Erreur lors du changement de mot de passe:', error);
      return { success: false, error: 'Erreur de connexion' };
    }
  },

  // Supprimer le compte
  deleteAccount: async (): Promise<{ success: boolean; error: string | null }> => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        return { success: false, error: 'Utilisateur non authentifi√©' };
      }

      // Supprimer le profil utilisateur
      const { error: profileError } = await supabase
        .from('user_profiles')
        .delete()
        .eq('id', user.id);

      if (profileError) {
        console.error('Erreur lors de la suppression du profil:', profileError);
        return { success: false, error: profileError.message };
      }

      // Supprimer l'utilisateur de l'auth
      const { error } = await supabase.auth.admin.deleteUser(user.id);

      if (error) {
        console.error('Erreur lors de la suppression du compte:', error);
        return { success: false, error: error.message };
      }

      return { success: true, error: null };
    } catch (error) {
      console.error('Erreur lors de la suppression du compte:', error);
      return { success: false, error: 'Erreur de connexion' };
    }
  }
}; 